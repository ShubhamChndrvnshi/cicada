// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8;

import 'forge-std/Test.sol';
import '../src/CicadaCumulativeVote.sol';
import '../src/LibUint1024.sol';
import '../src/LibSigmaProtocol.sol';


contract LibSigmaProtocolWrapper {

    function verifyProofOfPuzzleValidity(
        CicadaCumulativeVote.PublicParameters memory pp,
        bytes32 parametersHash,
        CicadaCumulativeVote.Puzzle memory Z,
        LibSigmaProtocol.ProofOfPuzzleValidity memory proof
    )
        external
        view
    {
        LibSigmaProtocol.verifyProofOfPuzzleValidity(pp, parametersHash, Z, proof);
    }

    function verifyProofOfPositivity(
        CicadaCumulativeVote.PublicParameters memory pp,
        bytes32 parametersHash,
        CicadaCumulativeVote.Puzzle memory Z,
        LibSigmaProtocol.ProofOfPositivity memory proof
    )
        external
        view
    {
        LibSigmaProtocol.verifyProofOfPositivity(pp, parametersHash, Z, proof);
    }

    function verifyProofOfSquare(
        CicadaCumulativeVote.PublicParameters memory pp,
        bytes32 parametersHash,
        uint256[4] memory squarePuzzle,
        LibSigmaProtocol.ProofOfSquare memory proof
    )
        external
        view
    {
        LibSigmaProtocol.verifyProofOfSquare(pp, parametersHash, squarePuzzle, proof);
    }


    function verifyProofOfEquality(
        CicadaCumulativeVote.PublicParameters memory pp,
        bytes32 parametersHash,
        uint256[4] memory Z1,
        uint256[4] memory Z2,
        LibSigmaProtocol.ProofOfEquality memory proof
    )
        external
        view
    {
        LibSigmaProtocol.verifyProofOfEquality(pp, parametersHash, Z1, Z2, proof);
    }

    function verifyExponentiation(
        CicadaCumulativeVote.PublicParameters memory pp,
        bytes32 parametersHash,
        uint256[4] memory u,
        uint256[4] memory w,
        LibSigmaProtocol.ProofOfExponentiation memory proof
    )
        external
        view
    {
        LibSigmaProtocol.verifyExponentiation(pp, parametersHash, u, w, proof);
    }
}


contract LibSigmaProtocolTest is Test {
    using LibUint1024 for *;

    LibSigmaProtocolWrapper lib;

    function setUp() external {
        lib = new LibSigmaProtocolWrapper();
    }

    function testProofOfPositivity()
        external
        view
    {}

    function testProofOfPuzzleValidity()
        external
        view
    {
        CicadaCumulativeVote.PublicParameters memory pp;
        pp.T = 4452;
        pp.N = [
            uint256(77172362864111114617917748173391518563926130646781395897952735037423669352854),
            uint256(96610448261158043896293629060087861863404094154536739522860101998449170256583),
            uint256(97942404613937553763725581857146462333053305725299043693607248412409052994209),
            uint256(15379587426505179214663355879126025467482381195924531218666088203234607799637)
        ];
        pp.g = [
            uint256(31484368619405306455498604353943240416111110145832042297195190976655112376964),
            uint256(38359878711059391060735500500529460021858509176960929479667651629224281458333),
            uint256(115598099196790108900646995963611087597017935348396589955485411152085706743825),
            uint256(76849393427099187827869375195281279617798137231705174312201793846204840372062)
        ];
        pp.h = [
            uint256(590527877384768893130631790812773015759685958225295452510747165528588670397),
            uint256(72291402931824529649172306290000012059922418408720348768826120867848108629147),
            uint256(76779887900233739716514715466947754001069682222045324277428108670980920990655),
            uint256(3980807396130520052695088382486288301695223925536648410058494555600925977185)
        ];
        pp.hInv = [
            uint256(34764539044926822164021136823309345537749873087530752915619055562384113546117),
            uint256(57386334516737500354100807535393921130389873722942984559132190027458642292714),
            uint256(104800993298631777495567185751365059884615420581886169792632150257219861157607),
            uint256(69079518781174040778316218833267633011055238369184647219609717111146288222189)
        ];
        pp.y = [
            uint256(18508833567985533119139824546014332612604200347877634948684658578949808524280),
            uint256(18140003136614563329371859086819862290911727990827699593541553692281294658699),
            uint256(101217615013961113687930883648244246261983301370750402118608436582374430435509),
            uint256(109809972910993681855269086084485078391917408553163149740887002672685155412622)
        ];
        pp.yInv = [
            uint256(11677904783625675387637725069251701926294351662574309010779968876809930810938),
            uint256(26463744512152389540047219731907891929210679393261299356324082131370119869412),
            uint256(48397139188391034596894324238709346317534898910817201140606079770950282420247),
            uint256(36448590461336618271609601581775872375566824589321005757475075632599038903551)
        ];
        bytes32 parametersHash = keccak256(abi.encode(pp));

        CicadaCumulativeVote.Puzzle memory Z;
        Z.u = [
            uint256(3997512729968016388842927150182942306495361775410914503389125093457203850236),
            uint256(100802473715559589609221853958696454510118048831516636370942508356841018987087),
            uint256(20163877804558199052258575241114995761529134504025791701155892465366515803091),
            uint256(100034498472223422188677311977199558042785774436202349034149630134291986472964)
        ];
        Z.v = [
            uint256(13748828106756090026701016697001905666456676863723308019820669391317048517906),
            uint256(71418500778683995659969803046031066493729489807159391462910961136967149186977),
            uint256(97713352469726980756493996714445292838367458278909044850932808493456480605268),
            uint256(93589237495825504640896385566006783106596006842532221068235734045559760564565)
        ];

        LibSigmaProtocol.ProofOfPuzzleValidity memory PoPV;
        PoPV.a = [
            uint256(14886840439875212047218329434712854507558832024923716747745186233392570336646),            
            uint256(3260214416063634679223182777181828373819753230436518935901304797392282034427),            
            uint256(16196104623703495271790931405689360230419951969155216434652249251418370871060),            
            uint256(52502569132241026520162718200713789479913077027423738461756269879437735521310)            
        ];
        PoPV.b = [
            uint256(17689157885135208091157662981769072768696405020381133913973732630096110145864),            
            uint256(11721166644745816315115449889286725238451506403800843039735177734293330715348),            
            uint256(63634279184203529323253045682358449270267873911491007601587626106848004344566),            
            uint256(7750857309762361430618065631911096746823319708331769664936218232063105537631)            
        ];
        PoPV.alpha = [
            uint256(0),            
            uint256(0),            
            uint256(9128795856286661123096097488512564339153028649144040055821587375237365567950),            
            uint256(59725891357426109062952443537868142461362263110821373041389397895096589043729)            
        ];
        PoPV.beta = [
            uint256(0),            
            uint256(0),            
            uint256(4),            
            uint256(31037749160904283403269085548628612851621138596358258131276450188541425838833)            
        ];

        lib.verifyProofOfPuzzleValidity(pp, parametersHash, Z, PoPV);
    }

    function testProofOfEquality()
        external
        view
    {}

    function testProofOfSquare()
        external
        view
    {}

    function testProofOfExponentiation()
        external
        view
    {
        CicadaCumulativeVote.PublicParameters memory pp;
        pp.N = [
            84348763984871917370346774297749981271626936286452355359821953072298717038149,
            35095280420769876708030057819944870631893047888122633737517382581267070516477,
            65516005424143632508578407360332036242005810706935846240285841715236283872173,
            50032405382199644076911930020437497413912248439115889001324519936378863097025
        ];
        pp.T = 11365;
        pp.g = [
            35023473790439515458136774651271566361250105408060832586649875576214319463909,
            40743163794912137082386461366391512857124756880269630363331299825232069546366,
            101660322567448401963756239045825247861412304914929880770583713260065338015085,
            76331960040015371570982996175452448416873619017341965529473882993218547554494
        ];
        pp.h = [
            4122102804312462461703018789016169637889991947265240667543580982358488623784,
            60989976591980197459669623747169967627274411904481411607896370787447765939318,
            30020065440086954884941395505248947805583566864072909741593507326990995727342,
            50538584662655560927640089476759984386227145361565875838825182585531078819104
        ];
        pp.hInv = [
            14614636095970743811145791726562352501302517981670763023640737475476221628516,
            84063580991148938555976594530017495900336529965709170709423227895328155530582,
            15091510291698085691777709818411591997703865767472977554899350923157387363494,
            5861728868727304498400441792297095423498160014694668570575418686166394094754
        ];
        pp.y = [
            13300934532900028724600184428479728575929455582530404468664376535673213645414,
            34394357487721753779151034544831136002108693679753743708736138346223664473126,
            68395622591938456936422540655342221186777520645959172254222537627596873526086,
            60473463122219299263421758885553872182042815490595872018221801986521783728016
        ];
        pp.yInv = [
            22625891404596477424223972270976420200462687725214327456186334952617006232281,
            49537416165327880103593739910399541936515874526550429652048287375189214840829,
            107890539655751965246234939838799471477089179058144643841980654919959876476556,
            75523769783762055430402132276456380413752862103233500719539080811466716840947
        ];
        bytes32 parametersHash = keccak256(abi.encode(pp));

        uint256[4] memory u = [
            30000602093739787173495417146986721310358703079958639579405310852463859758323,
            18962563320317883603906786315889751620961588393249390628317928002999469992664,
            96172969298012324124686255855798459986451385331975953084824240664042244977412,
            395534212109165185115107784899785576737939149137400697513895653206684316591
        ];
        uint256[4] memory w = [
            5118738896550548597721724021885352233591444807893824968383012831830210496511,
            64393099296361053877450734922516376376442757480606543014030010830215623796422,
            58734502392695304588130498365991338063649011532146014179752678123631049784018,
            104666930943329633999420907804065568005140567271762973290855652272707855672392
        ];

        LibSigmaProtocol.ProofOfExponentiation memory PoE;
        PoE.pi = [
            27251463783541552267511855929971812307661223668668860472428120179669268879123,
            65000386413702812047836177807155846492135656839454611708599617488423676373475,
            105625019804055918048771899569367841222217444864639095826070120151087837613733,
            16692089899538779950144611047695919867725027698895138547199594092272949369837
        ];
        PoE.j = 17;
        PoE.l = 101386264879546861318387843907181350604323036649605267629512508327298619906127;        
        lib.verifyExponentiation(
            pp,
            parametersHash,
            u,
            w,
            PoE
        );
    }
}
