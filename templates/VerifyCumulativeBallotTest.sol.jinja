// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8;

import 'forge-std/Test.sol';
import '../src/CicadaVote.sol';
import '../src/LibUint1024.sol';
import '../src/LibSigmaProtocol.sol';


contract VoteWrapper is CicadaVote {

    function verifyBallotValidity(
        PublicParameters calldata pp,
        bytes32 parametersHash,
        Puzzle[] calldata ballot,
        ProofOfValidity calldata PoV,
        uint64 pointsPerVoter
    )
        external
        view
    {
        _verifyBallotValidity(pp, parametersHash, ballot, PoV, pointsPerVoter);
    }
}


contract VerifyCumulativeBallotGeneratedTest is Test {
    using LibUint1024 for *;

    VoteWrapper vote;

    function setUp() external {
        vote = new VoteWrapper();
    }

    function testVerifyCumulativeBallot{{ i }}()
        external
        view
    {
        CicadaVote.PublicParameters memory pp;
        pp.T = {{ T }};
        pp.N = [
            {% for element in N %}
            {{ element }}{% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        pp.g = [
            {% for element in g %}
            {{ element }}{% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        pp.h = [
            {% for element in h %}
            {{ element }}{% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        pp.hInv = [
            {% for element in hInv %}
            {{ element }}{% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        pp.y = [
            {% for element in y %}
            {{ element }}{% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        pp.yInv = [
            {% for element in yInv %}
            {{ element }}{% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];

        CicadaVote.Puzzle[] memory ballot = new CicadaVote.Puzzle[]({{ numChoices }});
        {% for puzzle in ballot %}
        ballot[{{ loop.index0 }}].u = [
            {% for element in puzzle.u %}
            {{ element }}{% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        ballot[{{ loop.index0 }}].v = [
            {% for element in puzzle.v %}
            {{ element }}{% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        {% endfor %}

        CicadaVote.ProofOfValidity memory PoV;
        PoV.R = {{ R }};

        PoV.PoPosS = new LibSigmaProtocol.ProofOfPositivity[]({{ numChoices }});
        {% for proofOfPos in proofs %}
        {% set outer_loop = loop %}

        {% for v in proofOfPos.squareDecomposition %}
        PoV.PoPosS[{{ outer_loop.index0 }}].squareDecomposition[{{ loop.index0 }}] = [
            {% for element in v %}
            {{ element }}{% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        {% endfor %}

        {% for proofOfSquare in proofOfPos.PoKSqS %}
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSqS[{{ loop.index0 }}].squareRoot = [
            {% for element in proofOfSquare.squareRoot %}
            {{ element }}{% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSqS[{{ loop.index0 }}].quotient = [
            {% for element in proofOfSquare.quotient %}
            {{ element }}{% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSqS[{{ loop.index0 }}].p1.A1 = [
            {% for element in proofOfSquare.A1 %}
            {{ element }}{% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSqS[{{ loop.index0 }}].p1.A2 = [
            {% for element in proofOfSquare.A2 %}
            {{ element }}{% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSqS[{{ loop.index0 }}].p1.A = [
            {% for element in proofOfSquare.A %}
            {{ element }}{% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSqS[{{ loop.index0 }}].p2.x1 = [
            {% for element in proofOfSquare.x1 %}
            {{ element }}{% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSqS[{{ loop.index0 }}].p2.x2 = [
            {% for element in proofOfSquare.x2 %}
            {{ element }}{% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSqS[{{ loop.index0 }}].p2.w1 = [
            {% for element in proofOfSquare.w1 %}
            {{ element }}{% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSqS[{{ loop.index0 }}].p2.w2 = [
            {% for element in proofOfSquare.w2 %}
            {{ element }}{% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSqS[{{ loop.index0 }}].p2.w = [
            {% for element in proofOfSquare.w %}
            {{ element }}{% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSqS[{{ loop.index0 }}].p2.wIsNegative = {{ proofOfSquare.wIsNegative }};
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSqS[{{ loop.index0 }}].p2.w2IsNegative = {{ proofOfSquare.w2IsNegative }};
        {% endfor %}

        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSEq.quotient = [
            {% for element in proofOfPos.PoKSEq.quotient %}
            {{ element }}{% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSEq.p1.A1 = [
            {% for element in proofOfPos.PoKSEq.A1 %}
            {{ element }}{% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSEq.p1.A2 = [
            {% for element in proofOfPos.PoKSEq.A2 %}
            {{ element }}{% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSEq.p1.A = [
            {% for element in proofOfPos.PoKSEq.A %}
            {{ element }}{% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSEq.p2.x1 = [
            {% for element in proofOfPos.PoKSEq.x1 %}
            {{ element }}{% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSEq.p2.x2 = [
            {% for element in proofOfPos.PoKSEq.x2 %}
            {{ element }}{% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSEq.p2.w1 = [
            {% for element in proofOfPos.PoKSEq.w1 %}
            {{ element }}{% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSEq.p2.w2 = [
            {% for element in proofOfPos.PoKSEq.w2 %}
            {{ element }}{% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSEq.p2.w = [
            {% for element in proofOfPos.PoKSEq.w %}
            {{ element }}{% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSEq.p2.wIsNegative = {{ proofOfPos.PoKSEq.wIsNegative }};
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSEq.p2.w2IsNegative = false;
        {% endfor %}
        
        vote.verifyBallotValidity(pp, keccak256(abi.encode(pp)), ballot, PoV, {{ pointsPerVoter}});
    }
}