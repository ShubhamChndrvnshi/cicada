// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8;

import 'forge-std/Test.sol';
import '../src/CicadaCumulativeVote.sol';
import '../src/LibUint1024.sol';
import '../src/LibSigmaProtocol.sol';


contract VoteWrapper is CicadaCumulativeVote {

    function verifyBallotValidity(
        PublicParameters calldata pp,
        bytes32 parametersHash,
        Puzzle[] calldata ballot,
        ProofOfBallotValidity calldata PoV,
        uint64 pointsPerVoter
    )
        external
        view
    {
        _verifyBallotValidity(pp, parametersHash, ballot, PoV, pointsPerVoter);
    }
}


contract VerifyCumulativeBallotGeneratedTest is Test {
    using LibUint1024 for *;

    VoteWrapper vote;

    function setUp() external {
        vote = new VoteWrapper();
    }

    function testVerifyCumulativeBallot()
        external
        view
    {
        CicadaCumulativeVote.PublicParameters memory pp;
        pp.T = {{ T }};
        pp.N = [
            {% for element in N %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        pp.g = [
            {% for element in g %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        pp.h = [
            {% for element in h %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        pp.hInv = [
            {% for element in hInv %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        pp.y = [
            {% for element in y %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        pp.yInv = [
            {% for element in yInv %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];

        CicadaCumulativeVote.Puzzle[] memory ballot = new CicadaCumulativeVote.Puzzle[]({{ numChoices }});
        {% for puzzle in ballot %}
        ballot[{{ loop.index0 }}].u = [
            {% for element in puzzle.u %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        ballot[{{ loop.index0 }}].v = [
            {% for element in puzzle.v %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        {% endfor %}

        CicadaCumulativeVote.ProofOfBallotValidity memory PoV;
        PoV.R = {{ R }};

        PoV.PoPosS = new LibSigmaProtocol.ProofOfPositivity[]({{ numChoices }});
        {% for proofOfPos in proofs %}
        {% set outer_loop = loop %}

        {% for v in proofOfPos.squareDecomposition %}
        PoV.PoPosS[{{ outer_loop.index0 }}].squareDecomposition[{{ loop.index0 }}] = [
            {% for element in v %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        {% endfor %}

        {% for proofOfSquare in proofOfPos.PoKSqS %}
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSqS[{{ loop.index0 }}].squareRoot = [
            {% for element in proofOfSquare.squareRoot %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSqS[{{ loop.index0 }}].A1 = [
            {% for element in proofOfSquare.A1 %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSqS[{{ loop.index0 }}].A2 = [
            {% for element in proofOfSquare.A2 %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSqS[{{ loop.index0 }}].x = [
            {% for element in proofOfSquare.x %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSqS[{{ loop.index0 }}].w1 = [
            {% for element in proofOfSquare.w1 %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSqS[{{ loop.index0 }}].w2 = [
            {% for element in proofOfSquare.w2 %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSqS[{{ loop.index0 }}].w2IsNegative = {{ proofOfSquare.w2IsNegative }};
        {% endfor %}

        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSEq.A1 = [
            {% for element in proofOfPos.PoKSEq.A1 %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSEq.A2 = [
            {% for element in proofOfPos.PoKSEq.A2 %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSEq.x = [
            {% for element in proofOfPos.PoKSEq.x %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSEq.w1 = [
            {% for element in proofOfPos.PoKSEq.w1 %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        PoV.PoPosS[{{ outer_loop.index0 }}].PoKSEq.w2 = [
            {% for element in proofOfPos.PoKSEq.w2 %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}

            {% endfor %}
        ];
        {% endfor %}

        PoV.PoPV = new LibSigmaProtocol.ProofOfPuzzleValidity[]({{ numChoices }});
        {% for PoPV in proofsOfValidity %}
        PoV.PoPV[{{ loop.index0 }}].a = [
            {% for element in PoPV.a %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        PoV.PoPV[{{ loop.index0 }}].b = [
            {% for element in PoPV.b %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        PoV.PoPV[{{ loop.index0 }}].alpha = [
            {% for element in PoPV.alpha %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        PoV.PoPV[{{ loop.index0 }}].beta = [
            {% for element in PoPV.beta %}
            uint256({{ element }}){% if loop.index != 4 %},{% endif %}
            
            {% endfor %}
        ];
        {% endfor %}
        
        vote.verifyBallotValidity(pp, keccak256(abi.encode(pp)), ballot, PoV, {{ pointsPerVoter}});
    }
}